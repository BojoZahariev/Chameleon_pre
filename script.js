const Chameleon = props => {
  return (
    <svg className='svg' viewBox='0 0 421 325' width='421' height='325' xmlns='http://www.w3.org/2000/svg'>
      <path
        /*outline*/
        d='M49.57 165.79L48.86 157.22L63.14 130.08L73.86 97.22L78.14 90.79L89.57 84.36L108.14 77.93L132.43 65.79L148.86 61.5L153.14 52.22L161 40.08L173.86 35.79L177.43 40.79L188.14 23.65L193.86 30.79L209.57 15.08L216.71 26.5L235.28 12.22L237.43 22.22L253.14 14.36L255.28 25.08L273.85 24.36L274.57 32.22L293.14 33.65L291 41.5L304.57 44.36L304.57 54.36L325.28 57.93L323.85 66.5L338.85 74.36L333.85 82.22L348.85 87.93L344.57 94.36L363.14 105.07L357.42 112.22L374.57 122.22L373.14 129.36L383.14 138.65L382.42 145.08L394.57 159.36L388.14 162.22L407.42 203.65L415.28 230.79L416 263.65L401.71 297.22L374.57 316.5L352.42 322.22L321.71 307.93L308.14 282.93L306.71 251.5L317.42 219.36L334.57 195.07L351 191.5L371 197.93L386 225.07L384.57 246.5L373.85 269.36L357.43 272.22L343.85 266.5L336 251.5L337.43 238.65L341.71 228.65L349.57 227.93L358.14 231.5L361.71 240.07L356.71 245.07L349.57 248.65'
        fill='#222'
        stroke='#000000'
      />
      <path d='M50.51 165.9L54.55 168.43L80.81 156.3L131.32 152.77L146.98 138.12L146.98 137.62' fill='none' stroke='#000000' />
      <path d='M143.44 131.05L155.56 142.16' fill='none' stroke='#000000' />
      <path
        d='M54.04 168.42L82.32 182.06L103.03 187.11L123.23 187.61L137.38 186.1L153.03 178.52L176.77 167.91L191.92 159.83L205.06 155.29'
        fill='none'
        stroke='#000000'
      />
      <path d='M227.28 151.76L237.38 151.76L250.01 156.31L255.56 160.35' fill='none' stroke='#000000' />
      <path d='M280.82 177.51L292.44 185.09L301.02 188.62L311.13 188.12L317.19 185.59L332.84 198.72' fill='none' stroke='#000000' />
      <path d='M178.79 127.01L196.97 124.48L208.09 119.94' fill='none' stroke='#000000' />
      <path
        d='M209.6 106.8L206.06 159.33L206.06 174.99L197.98 173.97L183.34 176L175.76 190.14L176.27 208.32L183.84 217.41L186.37 210.34L185.86 196.7L191.42 214.38L195.46 218.93L200 213.88L202.02 199.73L202.02 190.64L209.1 194.68L219.2 193.17L225.26 183.07L221.72 176.5L217.18 173.97L221.22 165.39L229.3 140.13L233.34 115.39L235.36 92.15L231.82 77L225.26 76.49L209.1 80.03L194.95 89.63L182.33 100.23L177.78 103.77'
        fill='none'
        stroke='#000000'
      />
      <path d='M189.4 94.68L183.34 88.62' fill='none' stroke='#000000' />
      <path d='M192.94 124.99L188.9 133.58' fill='none' stroke='#000000' />
      <path
        d='M337.89 143.67L326.78 121.95L315.16 106.3L298.49 93.67L282.84 88.62L267.18 94.68L258.09 114.88L256.57 129.02L254.55 147.71L254.55 167.41L261.62 179.53L256.57 182.56L246.98 196.2L244.45 212.36L245.46 222.97L251.02 235.59L258.09 235.59L261.62 232.56L260.11 224.48L258.59 223.47'
        fill='none'
        stroke='#000000'
      />
      <path d='M262.64 232.57L267.19 239.14L272.74 239.64L282.34 230.55L282.34 222.47L278.3 218.93L272.74 225.5' fill='none' stroke='#000000' />
      <path
        d='M279.3 219.94L283.85 206.3L281.83 189.64L276.27 182.06L281.32 172.97L284.35 151.25L286.88 135.59L288.9 128.52L301.02 136.6L309.1 152.26L314.66 166.91'
        fill='none'
        stroke='#000000'
      />
      <path d='M334.36 131.05L344.97 132.06' fill='none' stroke='#000000' />
      <path
        d='M145.96 239.13L136.36 232.56L132.83 224.48L137.88 207.31L146.47 199.23L152.02 202.76L152.53 219.43L159.6 212.36L166.67 205.29L167.68 209.84L167.68 220.95L163.13 228.52L153.54 238.12L145.96 239.13L145.96 239.13Z'
        fill='none'
        stroke='#000000'
      />
      <path
        d='M296.48 240.4L288.4 238.13L284.11 231.81L282.34 225.75L283.6 220.2L287.64 212.87L292.94 204.79L295.72 201.76L298.75 204.79L299.51 211.11L294.96 221.96L301.78 206.05L308.85 202.77L312.14 209.84L313.91 223.23L312.39 232.57L304.31 237.87L296.48 240.4L296.48 240.4Z'
        fill='none'
        stroke='#000000'
      />
      <path
        d='M56.39 241.66L31.31 242.67L10.1 243.18L3.53 219.94L15.65 199.23L40.91 201.25C40.91 201.25 65.15 198.22 67.17 197.72C69.19 197.21 95.46 188.12 95.46 188.12L99.5 186.1'
        fill='none'
        stroke='#000000'
      />
      <path
        d='M63.13 223.98L49.49 256.81L45.45 261.36L46.46 270.95L54.54 272.47L59.09 271.96L70.71 260.85L82.32 243.68L92.43 232.06L119.7 227.01L132.74 224.99'
        fill='none'
        stroke='#000000'
      />
      <path
        d='M168.1 218.93L188.39 224.49L207.08 232.57L218.19 245.19L224.25 247.21L229.81 239.64L230.82 228.53L221.73 216.91L244.93 214.03'
        fill='none'
        stroke='#000000'
      />

      <path d='M46.21 260.79L53.53 264.89L59.53 271.78' fill='#ffff00' stroke='000000' />

      <path
        /*body*/
        d='M336.76 313.84L322.61 307.22L309.2 282.66L307.73 252.16L313.05 236.13C317.97 221.27 318.95 219.25 326.46 208.49C330.91 202.1 334.69 196.7 334.85 196.5C335.02 196.29 338.59 195.33 342.8 194.35L350.44 192.57L370.21 198.61L384.97 225.66L384.23 235.94C383.55 245.5 383.13 247 378.22 257.45L372.94 268.69L365.46 269.87C358.38 270.98 357.63 270.91 351.39 268.49C344.91 265.97 344.74 265.81 340.94 258.42C337.28 251.32 337.11 250.58 337.79 244.72C338.19 241.32 339.37 236.6 340.41 234.23C342.73 229 345.78 228.04 352.59 230.42C356.5 231.78 357.56 232.71 358.81 235.9C360.32 239.75 360.32 239.75 356.95 242.72C355.09 244.35 352.63 245.98 351.48 246.35C350.33 246.71 349.4 247.67 349.4 248.48C349.4 249.65 350.25 249.51 353.69 247.79C358.49 245.38 362.53 242.01 362.53 240.42C362.53 239.84 361.8 237.45 360.9 235.11C359.55 231.58 358.47 230.52 354.42 228.78C350.83 227.23 348.41 226.84 345.12 227.29C340.82 227.88 340.62 228.08 338.48 233.6C337.27 236.73 336.01 242.25 335.7 245.86C335.15 252.09 335.33 252.82 339.1 259.89C342.98 267.14 343.28 267.42 350 270.29C356.66 273.13 357.18 273.2 364.01 272.1C367.92 271.48 371.95 270.73 372.96 270.44C374.13 270.11 376.81 265.68 380.18 258.49C385.4 247.38 385.57 246.76 386.2 235.61L386.86 224.14L371.84 197.14L351.02 190.39L342.61 192.26C337.98 193.29 333.63 194.6 332.94 195.18C332.01 195.95 329.77 194.64 324.48 190.24L317.28 184.26L313.67 185.76C311.69 186.59 307.66 187.27 304.72 187.27C300.13 187.27 298.05 186.52 290.03 181.97C283.05 178.01 280.85 176.28 281.36 175.15C281.73 174.32 282.84 168.18 283.83 161.51C286.45 143.86 288.89 130.7 289.55 130.7C289.86 130.7 292.35 132.13 295.07 133.88C299.36 136.63 300.67 138.35 304.85 146.76C307.51 152.1 310.53 158.85 311.56 161.76C313.23 166.5 315.05 168.75 315.05 166.08C315.05 164.16 310.22 152.31 306.11 144.13C302.48 136.92 301.16 135.32 295.92 131.76C292.61 129.51 289.5 127.67 289.01 127.67C287.46 127.67 285.87 134.66 283.16 153.43C281.2 166.99 279.91 172.81 278.09 176.3C275.07 182.11 275.07 182.6 278.16 186.66C279.96 189.02 280.98 192.17 281.76 197.76C283.11 207.44 281.35 213.81 275.52 220.48C273.39 222.91 271.94 225.37 272.31 225.96C272.7 226.59 274.03 225.75 275.58 223.89C278.86 219.97 281.71 220.95 281.71 226C281.71 228.57 280.68 230.29 276.88 234.03C274.22 236.65 271.31 238.79 270.4 238.79C267.99 238.79 262.5 231.36 261.82 227.18C261.5 225.21 260.85 223.34 260.36 223.05C259.12 222.28 257.01 223.73 258.23 224.52C258.76 224.87 259.51 226.83 259.89 228.89C260.46 231.98 260.23 232.8 258.58 233.68C253.85 236.22 251.87 235.12 249.1 228.44C245.66 220.1 245 213.66 246.66 204.38C248.16 195.95 251.76 189.61 258.79 183.01L262.79 179.25L259.23 173.27C255.92 167.71 255.67 166.68 255.56 158.34C255.49 153.42 256.17 142.12 257.06 133.23C258.58 118.02 258.94 116.43 263.28 106.25L267.89 95.44L282.72 90.03L289.03 91.79C296.88 93.98 297.71 94.42 306.68 101.17C315.59 107.87 324.22 119.09 331.52 133.48C336.37 143.04 338.28 145.64 338.28 142.66C338.28 140.21 326.64 119.79 321.07 112.47C313.17 102.09 302.34 94.03 291.27 90.28L282.83 87.43L274.57 90.66L266.31 93.88L261.77 103.96C257.49 113.44 257.11 115.03 255.35 130.7C254.32 139.87 253.47 149.48 253.46 152.05L253.43 156.73L247.12 154.13C243.27 152.55 238.14 151.37 233.99 151.11C230.23 150.87 227.17 150.58 227.17 150.47C227.17 150.35 227.83 148.24 228.65 145.78C230.62 139.85 233.85 119.99 235.28 105C236.28 94.48 236.21 91.86 234.7 84.66L232.96 76.39L229.09 75.87C226.96 75.58 221.55 76.17 217.06 77.17C210.71 78.58 207.15 80.14 200.96 84.2C196.6 87.06 192.22 90.3 191.23 91.39C189.46 93.35 189.41 93.34 186.6 90.64C183.05 87.24 181.49 88.35 184.82 91.9L187.27 94.5L182.72 98.43C180.22 100.59 177.83 102.37 177.42 102.39C177 102.41 176.66 102.87 176.66 103.43C176.66 105.73 179.65 104.03 187.89 97.06C201.59 85.48 208.95 81.11 218.09 79.12C229.79 76.59 230.69 76.97 232.73 85.28C234.63 93.02 234.39 98.45 231.11 122.12C229.2 135.96 222.95 159.31 219.08 167.07C215.92 173.43 215.75 174.92 218.1 175.66C219.28 176.04 221.09 177.75 222.14 179.47C224.04 182.6 224.04 182.6 221.34 187.4C218.85 191.83 218.28 192.24 213.83 192.86C209.94 193.39 208.36 193.12 205.6 191.41C203.72 190.24 201.89 189.29 201.54 189.29C201.19 189.29 200.88 192.36 200.84 196.11C200.76 205.25 199.6 211.79 197.48 215.02L195.73 217.69L193.87 215.32C192.84 214.02 190.91 209.37 189.58 204.98C186.37 194.44 184.23 193.51 185 202.99C185.3 206.79 185.13 211 184.61 212.35C183.69 214.78 183.65 214.79 181.54 212.91C178.23 209.96 176.66 205.12 176.66 197.89C176.66 192.33 177.23 190.13 180.2 184.24C184.32 176.04 184.97 175.74 198.12 175.69L206.96 175.66L207.03 166.06C207.06 160.78 207.9 145.33 208.88 131.71C209.86 118.1 210.49 106.75 210.28 106.49C209.3 105.3 208 109.43 207.99 113.8L207.97 118.61L202.53 121.02C199.53 122.34 192.94 123.99 187.88 124.68C177.68 126.08 174.84 128.32 184.73 127.17L190.78 126.47L189.26 130.1C187.29 134.82 189.17 134.85 191.59 130.13C193.16 127.08 194.5 126.16 200.4 124.1C204.23 122.76 207.4 121.77 207.46 121.89C207.51 122.02 207.13 129.25 206.61 137.96L205.66 153.8L199.49 156.07C196.1 157.32 186.05 161.84 177.16 166.11C168.27 170.39 155.34 176.54 148.41 179.78L135.83 185.68L120.41 186.09C106.14 186.48 104.14 186.3 93.6 183.68C85.76 181.74 78.24 178.93 69.48 174.67L56.75 168.48L69.48 162.78L82.21 157.08L131.64 153.76L148.88 138.02L152.18 140.57C158.05 145.09 157.07 141.9 150.86 136.26C144.53 130.52 139.75 128.43 144.67 133.55L147.4 136.41L130.49 151.8L81.2 155.08L67.88 161.12C56.15 166.44 54.31 167.01 52.47 165.87C48.5 163.39 49.67 158.03 57.35 143.43C62.15 134.31 65.93 125.19 69.52 114.09C72.38 105.22 75.61 96.54 76.69 94.78C79.06 90.95 86.81 86.65 99.9 81.92C105.17 80.01 114.94 75.72 121.6 72.38C128.85 68.76 136.92 65.57 141.68 64.46C149.48 62.63 149.67 62.51 151.45 58.36C152.45 56.04 155.14 51.17 157.43 47.55C161.27 41.45 162.03 40.81 167.55 38.95L173.51 36.93L175.11 39.37C175.98 40.71 177.04 41.81 177.44 41.81C177.85 41.81 180.42 38.13 183.16 33.62L188.15 25.43L193.73 32.21L209.53 16.56L211.32 19.84C212.3 21.65 213.93 24.22 214.95 25.55L216.8 27.98L225.41 21.26C230.15 17.56 234.25 14.54 234.52 14.54C234.79 14.54 235.32 16.58 235.7 19.08C236.07 21.58 236.59 23.63 236.85 23.63C237.11 23.63 240.55 22 244.5 20.01C251.91 16.28 253.37 16.41 253.41 20.77C253.45 25.25 254.29 25.65 263.62 25.65C272.58 25.65 272.58 25.65 273.19 28.43C274.35 33.69 274.4 33.73 280.04 33.73C288.03 33.73 292.04 34.71 291.36 36.49C289.14 42.28 289.22 42.39 296.75 43.74L303.84 45.01L304.44 55.39L312.02 56.65C324.61 58.73 323.96 58.36 323.41 63.27L322.92 67.58L337.24 74.51L332.38 82.82L347.33 88.53L345.19 91.54C342.75 94.97 342.01 94.14 353.18 100.58C357.21 102.9 360.51 105.33 360.51 105.98C360.51 106.63 359.6 107.98 358.49 108.99C357.37 109.99 356.47 111.31 356.47 111.92C356.47 112.53 360.29 115.21 364.95 117.88L373.43 122.73L372.95 126.47C372.51 129.84 372.91 130.63 377.09 134.7C380.81 138.32 381.72 139.88 381.72 142.67C381.72 145.44 382.86 147.43 387.35 152.55L392.98 158.96L390.13 160.19C388.56 160.87 387.15 161.49 386.99 161.58C386.83 161.67 391.21 171.47 396.72 183.35C410.46 212.99 413.76 224.57 414.67 246.37L415.34 262.53L408.46 278.69C404.68 287.58 401.13 295.44 400.58 296.17C400.02 296.89 393.84 301.51 386.84 306.42C375.43 314.43 373.11 315.63 364.53 317.98C359.26 319.43 354.04 320.58 352.93 320.53C351.82 320.49 344.54 317.48 336.76 313.84L336.76 313.84ZM345.36 131.81C345.36 130.93 335.25 129.69 334.27 130.44C334.01 130.65 334.47 131.24 335.28 131.75C337.2 132.96 345.36 133.01 345.36 131.81L345.36 131.81ZM345.36 131.81L345.36 131.81C345.36 131.81 345.36 131.81 345.36 131.81Z'
        fill={props.color}
      />
      <path
        /*branch*/
        d='M50.1 271.01L47.07 270.4L46.65 266.48C46.06 261.12 46.06 261.03 46.62 261.72C46.86 262.02 48.44 263.01 50.12 263.91C52.5 265.18 53.68 266.11 55.44 268.09C57.45 270.35 57.76 270.58 58.24 270.1C58.71 269.63 58.5 269.27 56.35 266.9C54.35 264.69 53.36 263.94 50.49 262.46L47.05 260.68L48.58 258.9C50.19 257.02 50.45 256.44 59.42 234.77C61.76 229.11 63.67 224.33 63.67 224.14C63.67 223.95 63.39 223.8 63.05 223.8C62.57 223.8 61.59 225.81 58.88 232.35L55.34 240.89L52.81 241.09C49.23 241.37 32.43 241.97 20.62 242.25L10.61 242.48L7.46 231.26L4.31 220.05L9.92 210.41C13.01 205.1 15.72 200.58 15.94 200.35C16.25 200.03 19.27 200.17 28.67 200.94C42.55 202.09 39.26 202.23 58.09 199.65L67.33 198.39L81.66 193.55C89.55 190.9 96.78 188.33 97.73 187.84C99.3 187.05 99.63 187 101.13 187.36C102.04 187.58 107.28 187.88 112.78 188.04C121.86 188.29 123.47 188.24 130.28 187.51L137.78 186.71L145.28 183.07C149.4 181.07 158.26 176.98 164.96 173.98C171.66 170.98 180.5 166.73 184.6 164.53C190.66 161.29 193.31 160.1 198.67 158.24C202.31 156.98 205.32 155.94 205.37 155.94C205.42 155.94 205.46 160.06 205.46 165.1L205.46 174.25L203.76 174.01C199.13 173.35 196.28 173.43 189.61 174.42L182.86 175.41L178.99 182.55L175.12 189.69L175.34 199.16L175.56 208.62L179.65 213.53C181.89 216.23 183.85 218.44 183.99 218.44C184.13 218.44 184.84 216.77 185.57 214.73C186.8 211.26 186.89 210.73 186.9 206.78L186.92 202.55L188.82 208.49C190.87 214.92 190.83 214.84 193.59 217.93L195.47 220.03L197.7 217.58C198.92 216.23 200.12 214.79 200.35 214.37C201.08 213.1 202.6 200.77 202.6 196.21C202.6 193.9 202.69 192.01 202.8 192.01C202.9 192.01 204.29 192.76 205.88 193.68L208.77 195.34L212.02 194.92C213.81 194.68 216.27 194.32 217.48 194.11L219.69 193.74L222.75 188.62C224.44 185.8 225.81 183.29 225.81 183.02C225.81 182.76 225 181.07 224.01 179.25C222.37 176.23 222.06 175.87 220.15 174.81L218.07 173.66L219.95 169.71C220.98 167.54 222.91 162.35 224.25 158.17C226.59 150.87 226.71 150.59 227.59 150.63C228.19 150.65 228.29 150.72 227.87 150.83C227.53 150.92 227.24 151.3 227.24 151.68C227.24 152.33 227.54 152.37 232.16 152.37L237.08 152.37L243.43 154.67C248.08 156.36 250.34 157.39 251.89 158.51L254.01 160.05L254.02 163.98L254.03 167.91L257.24 173.44C259.01 176.49 260.46 179.08 260.46 179.21C260.46 179.34 259.45 180.04 258.23 180.76C256.15 181.99 255.65 182.57 251.19 188.92L246.38 195.76L245 204.51C244.23 209.33 243.55 213.32 243.48 213.39C243.37 213.5 221.86 216.29 221.05 216.3C220.44 216.3 221.21 217.44 225.64 223.08L230.14 228.8L229.64 234.08L229.15 239.36L226.58 242.83C225.18 244.74 223.9 246.29 223.76 246.28C223.61 246.26 222.34 245.82 220.93 245.3C218.37 244.34 218.33 244.3 212.85 238.09L207.33 231.84L198.04 227.85C189.59 224.22 187.83 223.6 178.53 221.06L168.32 218.26L168.32 213.9C168.32 209.86 167.5 204.16 166.92 204.16C166.8 204.16 163.73 207.13 160.1 210.76C156.47 214.4 153.38 217.37 153.23 217.37C153.08 217.37 152.96 215.15 152.96 212.42C152.96 209.7 152.86 206.29 152.73 204.84L152.5 202.19L149.5 200.3L146.49 198.41L145.35 199.37C144.72 199.9 142.64 201.82 140.73 203.63L137.25 206.94L134.7 215.67L132.15 224.39L124.79 225.55C120.74 226.19 111.7 227.78 104.7 229.09L91.98 231.48L86.85 237.38C83.15 241.63 80.08 245.69 75.91 251.87C70.2 260.32 70.03 260.53 64.39 265.91L58.66 271.37L55.9 271.49C54.23 271.57 51.94 271.38 50.1 271.01L50.1 271.01Z'
        fill='#808000'
      />
      <path
        d='M141.46 235.12C137.08 232.06 136.88 231.84 135.3 228.15L133.67 224.34L135.9 216.79C137.12 212.63 138.33 208.76 138.59 208.19C138.85 207.61 140.77 205.62 142.85 203.75L146.65 200.36L148.92 201.73L151.19 203.1L151.55 211.85C151.75 216.66 152.06 220.6 152.24 220.6C152.42 220.6 155.63 217.52 159.38 213.77C167.26 205.86 166.82 205.79 166.9 215L166.95 220.76L164.71 224.34C161.61 229.31 152.97 237.77 150.98 237.77C150.18 237.78 148.73 237.89 147.76 238.03C146.21 238.25 145.41 237.88 141.46 235.12L141.46 235.12Z'
        fill={props.color}
      />
      <path
        /*right paw*/
        d='M292.81 238.59C289.22 237.64 289.05 237.52 286.93 234.53C284.03 230.43 282.89 226.51 283.67 223.26C284.6 219.36 292.33 206.13 294.94 203.97C296.37 202.78 298.07 204.89 298.42 208.27C298.68 210.78 298.48 211.59 296.47 216.3C295.24 219.18 294.23 221.65 294.23 221.77C294.23 221.9 294.54 222.12 294.92 222.27C295.42 222.46 296.58 220.29 299.02 214.54L302.43 206.54L305.44 205.19C307.09 204.44 308.49 203.91 308.54 204.01C310.61 207.76 311.46 210.64 312.22 216.48C312.96 222.11 312.99 223.62 312.44 227.49L311.79 231.97L307.93 234.53C305.81 235.94 302.37 237.65 300.29 238.34L296.5 239.58L292.81 238.59L292.81 238.59Z'
        fill={props.color}
      />
      <path
        d='M142.7 235.52C140.9 234.28 138.92 232.86 138.31 232.36C137.15 231.41 134.12 225.44 134.12 224.13C134.13 223.2 138.46 209.28 139.12 208.08C139.56 207.27 142.08 204.79 145.32 201.97L146.67 200.79L148.68 201.92C151 203.22 151.29 204.12 151.29 209.93C151.3 214.75 151.84 220.6 152.27 220.6C152.46 220.6 155.47 217.87 158.97 214.53C162.48 211.2 165.57 208.47 165.85 208.47C166.15 208.47 166.44 210.92 166.57 214.41L166.77 220.34L164.08 224.44C161.26 228.74 153.72 236.44 151.51 237.28C148.61 238.38 146.15 237.89 142.7 235.52L142.7 235.52Z'
        fill='#808000'
      />
      <path
        /*branch*/
        d='M314.47 223.29C314.45 222.14 314.07 218.54 313.62 215.29C313 210.81 312.4 208.5 311.08 205.65C310.13 203.59 309.25 201.91 309.14 201.91C309.02 201.91 307.23 202.68 305.16 203.63C302.52 204.83 301.14 205.78 300.6 206.79L299.82 208.22L299.8 206.56C299.79 205.34 299.26 204.33 297.8 202.77L295.82 200.65L294.46 201.91C292.5 203.73 287.39 211.46 284.58 216.85C282.23 221.37 282.14 221.47 281.28 220.52C280.42 219.57 280.47 219.28 282.52 213.06L284.65 206.6L283.59 197.86L282.53 189.13L279.84 185.58L277.15 182.02L278.7 179.21C280.55 175.85 281.1 175.17 281.1 176.2C281.1 176.62 280.85 177.2 280.56 177.49C279.83 178.22 290.53 185.06 296.25 187.53L300.54 189.39L306.07 189.09C310.05 188.87 312.34 188.48 314.24 187.7C317.32 186.42 316.14 185.82 325.23 193.32C328.43 195.96 330.97 198.35 330.88 198.64C330.79 198.93 327.58 203.58 323.76 208.98C318.78 216.01 316.49 219.73 315.66 222.09L314.51 225.39L314.47 223.29L314.47 223.29Z'
        fill='#808000'
      />
      <path
        /*left paw*/
        d='M146.77 237.16C144.82 236.62 140.44 233.85 138.56 231.98C137.89 231.3 136.7 229.45 135.93 227.87C134.24 224.41 134.28 224 137.23 214.63L139.37 207.88L142.87 204.64C144.79 202.86 146.66 201.4 147.03 201.4C147.4 201.4 148.32 201.94 149.08 202.59C150.24 203.59 150.53 204.36 150.85 207.26C151.07 209.18 151.25 212.25 151.27 214.09C151.29 217.86 151.73 220.6 152.31 220.6C152.52 220.6 155.61 217.95 159.19 214.71L165.69 208.83L166.03 211.05C166.21 212.27 166.39 214.88 166.41 216.85C166.44 220.37 166.39 220.51 163.87 224.1C162.46 226.11 159.7 229.44 157.75 231.5C152.62 236.9 150.23 238.13 146.77 237.16L146.77 237.16Z'
        fill={props.color}
      />
      <path
        /*eye*/
        id='eyeball'
        className='eye'
        d='M121.72 117.41C121.72 120.35 120.31 123.18 117.8 125.26C115.29 127.35 111.89 128.52 108.34 128.52C104.79 128.52 101.38 127.35 98.87 125.26C96.36 123.18 94.95 120.35 94.95 117.41C94.95 114.46 96.36 111.63 98.87 109.55C101.38 107.47 104.79 106.3 108.34 106.3C111.89 106.3 115.29 107.47 117.8 109.55C120.31 111.63 121.72 114.46 121.72 117.41L121.72 117.41Z'
        fill='#ffffff'
      />
      <path
        id='iris'
        className='eye'
        d='M115.41 117.16C115.41 118.83 114.61 120.44 113.19 121.62C111.77 122.81 109.84 123.47 107.83 123.47C105.82 123.47 103.9 122.81 102.48 121.62C101.05 120.44 100.26 118.83 100.26 117.16C100.26 115.48 101.05 113.88 102.48 112.69C103.9 111.51 105.82 110.84 107.83 110.84C109.84 110.84 111.77 111.51 113.19 112.69C114.61 113.88 115.41 115.48 115.41 117.16L115.41 117.16Z'
        fill='#000000'
      />
    </svg>
  );
};

const ColorFrame1 = props => {
  if (props.clicked) {
    return null;
  } else {
    return (
      <div className='blocks' onClick={props.onClick}>
        {props.color}
      </div>
    );
  }
};

const ColorFrame2 = props => {
  if (props.clicked) {
    return null;
  } else {
    return (
      <div className='blocks' onClick={props.onClick}>
        {props.color}
      </div>
    );
  }
};

const ColorFrame3 = props => {
  if (props.clicked) {
    return null;
  } else {
    return (
      <div className='blocks' onClick={props.onClick}>
        {props.color}
      </div>
    );
  }
};

class Message extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      animation: true
    };
  }

  componentDidUpdate(prevProps) {
    if (this.props.mess !== prevProps.mess) {
      this.setState({
        animation: !this.state.animation
      });
    }
  }

  render() {
    return <div className={`speechBubble ${this.state.animation && 'speechBubbleAnimated'}`}>{this.props.mess}</div>;
  }
}

const ActionBtnRGB = props => {
  return (
    <div className='actionBtn' onClick={props.onClick}>
      {props.text}
    </div>
  );
};

const ActionBtnHEX = props => {
  return (
    <div className='actionBtn' onClick={props.onClick}>
      {props.text}
    </div>
  );
};

class Container extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      color: '#A4CAA2',
      colorArray: [],
      shuffledColorArray: [],
      clickedBlocks: [],
      block1Clicked: false,
      block2Clicked: false,
      block3Clicked: false,
      score: 0,
      gameStarted: false,
      mode: ''
    };

    this.changeColorRGB = this.changeColorRGB.bind(this);
    this.clickControl = this.clickControl.bind(this);
    this.shuffleColors = this.shuffleColors.bind(this);
    this.arraysEqual = this.arraysEqual.bind(this);
    this.changeColorHEX = this.changeColorHEX.bind(this);
  }

  colorRGB() {
    let r = Math.floor(Math.random() * 255);
    let g = Math.floor(Math.random() * 255);
    let b = Math.floor(Math.random() * 255);

    let rgbArray = [r, g, b];
    return rgbArray;
  }

  colorHex() {
    var randomColor = (Math.random().toString(16) + '000000').slice(2, 8);
    let a = randomColor.slice(0, 2);
    let b = randomColor.slice(2, 4);
    let c = randomColor.slice(4, 6);

    let hexArray = [a, b, c];

    return hexArray;
  }

  shuffleColors(a) {
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }

    return a;
  }

  changeColorRGB() {
    let currentRGB = this.colorRGB();
    let shuffledArrayRgb = [...currentRGB];
    let shuffledArrayRgb2 = this.shuffleColors(shuffledArrayRgb);

    this.setState({
      color: 'rgb(' + currentRGB[0] + ',' + currentRGB[1] + ',' + currentRGB[2] + ')',
      colorArray: currentRGB,
      shuffledColorArray: shuffledArrayRgb2,
      clickedBlocks: [],
      block1Clicked: false,
      block2Clicked: false,
      block3Clicked: false,
      gameStarted: true
    });
  }

  changeColorHEX() {
    let currentHex = this.colorHex();

    let shuffledHex = [...currentHex];
    let shuffledHex2 = this.shuffleColors(shuffledHex);

    this.setState({
      color: `#${shuffledHex2.join('')}`,
      colorArray: currentHex,
      shuffledColorArray: shuffledHex2,
      clickedBlocks: [],
      block1Clicked: false,
      block2Clicked: false,
      block3Clicked: false,
      gameStarted: true
    });
  }

  clickControl(name, block) {
    if (this.state.clickedBlocks.length < 3 && this.state.shuffledColorArray.length) {
      if (block === 1) {
        this.setState({
          block1Clicked: true
        });
      } else if (block === 2) {
        this.setState({
          block2Clicked: true
        });
      } else if (block === 3) {
        this.setState({
          block3Clicked: true
        });
      }

      this.setState({
        clickedBlocks: this.state.clickedBlocks.concat(name)
      });
    }

    //score
    let arr1 = [this.state.colorArray[0], this.state.colorArray[1]];
    let arr2 = [this.state.clickedBlocks[0], this.state.clickedBlocks[1]];
    if (this.arraysEqual(arr1, arr2) && this.state.clickedBlocks.length) {
      this.setState(state => ({
        score: state.score + 1
      }));
    }
  }

  arraysEqual = (a1, a2) => {
    return JSON.stringify(a1) == JSON.stringify(a2);
  };

  render() {
    return (
      <div>
        {!this.state.gameStarted ? (
          <p className='blocksDivText'>
            Dalto is a color blind chameleon. <br /> Help him to hide from the poachers.
          </p>
        ) : (
          <p className='blocksDivText'>Choose the RED, GREEN and BLUE RGB values in the right order.</p>
        )}

        {this.state.gameStarted && (
          <div className='blocksDiv'>
            <ColorFrame1
              onClick={() => this.clickControl(this.state.shuffledColorArray[0], 1)}
              color={this.state.shuffledColorArray[0]}
              clicked={this.state.block1Clicked}
            />
            <ColorFrame2
              onClick={() => this.clickControl(this.state.shuffledColorArray[1], 2)}
              color={this.state.shuffledColorArray[1]}
              clicked={this.state.block2Clicked}
            />
            <ColorFrame3
              onClick={() => this.clickControl(this.state.shuffledColorArray[2], 3)}
              color={this.state.shuffledColorArray[2]}
              clicked={this.state.block3Clicked}
            />
          </div>
        )}

        {!this.state.gameStarted ? (
          <ActionBtnRGB onClick={this.changeColorRGB} text={'Start Game'} />
        ) : this.state.clickedBlocks.length < 3 ? (
          <ActionBtnRGB onClick={this.changeColorRGB} text={'Restart'} />
        ) : this.arraysEqual(this.state.colorArray, this.state.clickedBlocks) ? (
          <ActionBtnRGB onClick={this.changeColorRGB} text={'Next Round'} />
        ) : (
          <ActionBtnRGB onClick={this.changeColorRGB} text={'Try Again'} />
        )}

        {!this.state.gameStarted ? <ActionBtnHEX onClick={this.changeColorHEX} text={'Start Game HEX'} /> : null}

        <div className='field' style={{ backgroundColor: this.state.color }}>
          <Chameleon color={'rgb(' + this.state.clickedBlocks[0] + ',' + this.state.clickedBlocks[1] + ',' + this.state.clickedBlocks[2] + ')'} />

          {!this.state.gameStarted ? (
            <Message mess={"I'm not good with colors"} />
          ) : this.arraysEqual(this.state.colorArray, this.state.clickedBlocks) && this.state.clickedBlocks.length > 0 ? (
            <Message mess={"That's it, thank you!"} />
          ) : this.state.clickedBlocks.length >= 3 ? (
            <Message mess={'Nope, wrong color!'} />
          ) : (
            <Message mess={'Help me hide please!'} />
          )}
        </div>

        <p className='score'>Score: {this.state.score}</p>

        <div className='colorBar'>
          RGB(
          <p id='colorBarBlock1' className='colorBarBlocks'>
            {this.state.clickedBlocks[0]}
          </p>
          ,
          <p id='colorBarBlock2' className='colorBarBlocks'>
            {this.state.clickedBlocks[1]}
          </p>
          ,
          <p id='colorBarBlock3' className='colorBarBlocks'>
            {this.state.clickedBlocks[2]}
          </p>
          )
        </div>

        <p> {this.state.color}</p>

        <p className='title'>Dalto</p>
      </div>
    );
  }
}

const domContainer = document.querySelector('#root');
ReactDOM.render(<Container />, domContainer);
