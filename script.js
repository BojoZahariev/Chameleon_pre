const ColorFrame1 = props => {
  if (props.clicked) {
    return (
      <div className="blocks">
        <p>Clicked</p>
      </div>
    );
  } else {
    return (
      <div className="blocks" onClick={props.onClick}>
        <p>{props.color}</p>
      </div>
    );
  }
};

const ColorFrame2 = props => {
  if (props.clicked) {
    return (
      <div className="blocks">
        <p>Clicked</p>
      </div>
    );
  } else {
    return (
      <div className="blocks" onClick={props.onClick}>
        <p>{props.color}</p>
      </div>
    );
  }
};

const ColorFrame3 = props => {
  if (props.clicked) {
    return (
      <div className="blocks">
        <p>Clicked</p>
      </div>
    );
  } else {
    return (
      <div className="blocks" onClick={props.onClick}>
        <p>{props.color}</p>
      </div>
    );
  }
};

const Message = props => {
  return (
    <div>
      <p>{props.mess}</p>
    </div>
  );
};

const ActionButton = props => {
  return <button onClick={props.onClick}>{props.text}</button>;
};

const Chameleon = props => {
  return (
    <svg className="svg" viewBox="0 0 744.09447 1052.362179" xmlns="http://www.w3.org/2000/svg">
      <path
        d="m198.57 458.79-0.7143-8.5714 14.286-27.143 10.714-32.857 4.2857-6.4286 11.429-6.4286 18.571-6.4286 24.286-12.143 16.429-4.2857 4.2857-9.2857 7.8571-12.143 12.857-4.2857 3.5714 5 10.714-17.143 5.7143 7.1429 15.714-15.714 7.1429 11.429 18.571-14.286 2.1429 10 15.714-7.8571 2.1429 10.714 18.571-0.7143 0.7143 7.8571 18.571 1.4286-2.1429 7.8571 13.571 2.8571v10l20.714 3.5714-1.4286 8.5714 15 7.8571-5 7.8571 15 5.7143-4.2857 6.4286 18.571 10.714-5.7143 7.1429 17.143 10-1.4286 7.1429 10 9.2857-0.7143 6.4286 12.143 14.286-6.4286 2.8571 19.286 41.429 7.8571 27.143 0.7143 32.857-14.286 33.571-27.143 19.286-22.143 5.7143-30.714-14.286-13.571-25-1.4286-31.429 10.714-32.143 17.143-24.286 16.429-3.5714 20 6.4286 15 27.143-1.4286 21.429-10.714 22.857-16.429 2.8571-13.571-5.7143-7.8571-15 1.4286-12.857 4.2857-10 7.8571-0.7143 8.5714 3.5714 3.5714 8.5714-5 5-7.1429 3.5714"
        fill="none" /*branch*/
        stroke="#000"
      />
      <path d="m199.51 458.9 4.0406 2.5254 26.264-12.122 50.508-3.5355 15.657-14.647v-0.5051" fill="none" stroke="#000" />
      <path d="m292.44 424.05 12.122 11.112" fill="none" stroke="#000" />
      <path
        d="m203.04 461.42 28.284 13.637 20.708 5.0508 20.203 0.5051 14.142-1.5152 15.657-7.5761 23.739-10.607 15.152-8.0812 13.132-4.5457"
        fill="none"
        stroke="#000"
      />
      <path d="m376.28 444.76h10.102l12.627 4.5457 5.5558 4.0406" fill="none" stroke="#000" />
      <path d="m429.82 470.51 11.617 7.5761 8.5863 3.5355 10.102-0.5051 6.0609-2.5254 15.657 13.132" fill="none" stroke="#000" />
      <path d="m327.79 420.01 18.183-2.5254 11.112-4.5457" fill="none" stroke="#000" />
      <path
        d="m358.6 399.8-3.5355 52.528v15.657l-8.0812-1.0102-14.647 2.0203-7.5762 14.142 0.5051 18.183 7.5761 9.0914 2.5254-7.0711-0.5051-13.637 5.5558 17.678 4.0406 4.5457 4.5457-5.0508 2.0203-14.142v-9.0914l7.0711 4.0406 10.102-1.5152 6.0609-10.102-3.5355-6.566-4.5457-2.5254 4.0406-8.5863 8.0812-25.254 4.0406-24.749 2.0203-23.234-3.5355-15.152-6.566-0.5051-16.162 3.5355-14.142 9.5964-12.627 10.607-4.5457 3.5355"
        fill="none"
        stroke="#000"
      />
      <path d="m338.4 387.68-6.0609-6.0609" fill="none" stroke="#000" />
      <path d="m341.94 417.99-4.0406 8.5863" fill="none" stroke="#000" />
      <path
        d="m486.89 436.67-11.112-21.718-11.617-15.657-16.668-12.627-15.657-5.0508-15.657 6.0609-9.0914 20.203-1.5152 14.142-2.0203 18.688v19.698l7.0711 12.122-5.0508 3.0305-9.5965 13.637-2.5254 16.162 1.0102 10.607 5.5558 12.627h7.0711l3.5355-3.0305-1.5152-8.0812-1.5152-1.0102"
        fill="none"
        stroke="#000"
      />
      <path d="m411.64 525.57 4.5457 6.566 5.5558 0.5051 9.5965-9.0914v-8.0812l-4.0406-3.5355-5.5558 6.566" fill="none" stroke="#000" />
      <path
        d="m428.3 512.94 4.5457-13.637-2.0203-16.668-5.5558-7.5762 5.0508-9.0914 3.0305-21.718 2.5254-15.657 2.0203-7.0711 12.122 8.0812 8.0812 15.657 5.5558 14.647"
        fill="none"
        stroke="#000"
      />
      <path d="m483.36 424.05 10.607 1.0102" fill="none" stroke="#000" />
      <path
        d="m294.96 532.13-9.5965-6.566-3.5355-8.0812 5.0508-17.173 8.5863-8.0812 5.5558 3.5355 0.5051 16.668 7.0711-7.0711 7.0711-7.0711 1.0102 4.5457v11.112l-4.5457 7.5761-9.5965 9.5965-7.5762 1.0102z"
        fill="none"
        stroke="#000"
      />
      <path
        d="m445.48 533.4-8.0812-2.2728-4.2931-6.3134-1.7678-6.0609 1.2627-5.5558 4.0406-7.3236 5.3033-8.0812 2.7779-3.0305 3.0305 3.0305 0.7576 6.3135-4.5457 10.859 6.8185-15.91 7.0711-3.283 3.283 7.0711 1.7678 13.384-1.5152 9.3439-8.0812 5.3033-7.8287 2.5254z"
        fill="none"
        stroke="#000"
      />
      <path
        d="m205.39 534.66-25.08 1.0102-21.213 0.5051-6.566-23.234 12.122-20.708 25.254 2.0203s24.244-3.0305 26.264-3.5355c2.0203-0.5051 28.284-9.5965 28.284-9.5965l4.0406-2.0203"
        fill="none"
        stroke="#000"
      />
      <path
        d="m212.13 516.98-13.637 32.83-4.0406 4.5457 1.0102 9.5965 8.0812 1.5152 4.5457-0.5051 11.617-11.112 11.617-17.173 10.102-11.617 27.274-5.0508 13.045-2.0203"
        fill="none"
        stroke="#000"
      />
      <path
        d="m317.1 511.93 20.29 5.5558 18.688 8.0812 11.112 12.627 6.0609 2.0203 5.5558-7.5761 1.0102-11.112-9.0914-11.617 23.208-2.8825"
        fill="none"
        stroke="#000"
      />
      <path d="m195.21 553.79 7.3236 4.1037 5.9978 6.8817" fill="#ff0" stroke="#000" />
      <path
        d="m485.76 606.84-14.151-6.6158-6.7029-12.28-6.7029-12.28-0.7355-15.252-0.7355-15.252 5.3149-16.029c4.9266-14.858 5.9065-16.878 13.411-27.646 4.453-6.3892 8.2308-11.783 8.3952-11.987s3.7394-1.1702 7.9445-2.1477l7.6457-1.7773 9.8856 3.0189 9.8856 3.0189 7.377 13.522 7.377 13.522-0.7359 10.281c-0.6846 9.5653-1.1036 11.064-6.0151 21.517l-5.2793 11.236-7.4785 1.1793c-7.0811 1.1166-7.8286 1.0432-14.067-1.3813-6.4839-2.5198-6.6505-2.6802-10.453-10.067-3.6573-7.1046-3.8258-7.8385-3.1458-13.698 0.3952-3.4049 1.5739-8.1243 2.6193-10.488 2.3152-5.2338 5.3667-6.1906 12.178-3.8185 3.9069 1.3606 4.9691 2.2974 6.2225 5.4883 1.5098 3.8435 1.5078 3.8508-1.8668 6.8137-1.858 1.6314-4.3172 3.2641-5.4648 3.6284s-2.0867 1.3227-2.0867 2.13c0 1.1757 0.8541 1.039 4.2931-0.6872 4.8012-2.4098 8.8388-5.7776 8.8388-7.3724 0-0.5791-0.7302-2.9648-1.6226-5.3015-1.3515-3.5389-2.4345-4.598-6.4824-6.3393-3.5962-1.547-6.0139-1.9325-9.2982-1.4823-4.3012 0.5895-4.5065 0.7844-6.6448 6.3056-1.2136 3.1335-2.4657 8.6519-2.7826 12.263-0.5461 6.2239-0.3685 6.9546 3.4081 14.024 3.8764 7.2562 4.1714 7.5378 10.898 10.407 6.6608 2.8415 7.1732 2.9077 14.012 1.8108 3.9043-0.6262 7.9312-1.3744 8.9488-1.6628 1.1635-0.3297 3.8423-4.7639 7.2178-11.948 5.2232-11.116 5.3852-11.732 6.0228-22.887l0.6552-11.463-7.5111-13.502-7.5111-13.502-10.408-3.3769-10.408-3.3769-8.4126 1.8745c-4.6269 1.031-8.9795 2.345-9.6725 2.9201-0.9254 0.768-3.1708-0.5432-8.4577-4.9388l-7.1978-5.9844-3.6087 1.5078c-1.9848 0.8293-6.014 1.5078-8.9538 1.5078-4.5873 0-6.6703-0.7517-14.692-5.3017-6.9752-3.9567-9.1745-5.6865-8.6691-6.8185 0.3725-0.8343 1.4855-6.9717 2.4734-13.639 2.6158-17.653 5.057-30.81 5.7168-30.81 0.3167 0 2.8038 1.4297 5.5268 3.1771 4.2904 2.7531 5.5955 4.4717 9.7806 12.879 2.6563 5.3363 5.6718 12.089 6.7012 15.006 1.6704 4.7331 3.4928 6.9851 3.4928 4.3162 0-1.9196-4.8262-13.768-8.9404-21.948-3.6293-7.2165-4.9464-8.8166-10.185-12.374-3.3094-2.2474-6.4204-4.0861-6.9132-4.0861-1.5498 0-3.1373 6.9883-5.8516 25.759-1.961 13.562-3.2488 19.373-5.0673 22.865-3.0261 5.8118-3.0226 6.3027 0.073 10.361 1.7979 2.3572 2.8196 5.5103 3.5974 11.102 1.3459 9.6766-0.4076 16.054-6.2459 22.717-2.1285 2.4291-3.5732 4.8967-3.2104 5.4836 0.391 0.6326 1.725-0.2092 3.2761-2.0672 3.2774-3.9258 6.1327-2.9461 6.1327 2.1042 0 2.5685-1.0377 4.2928-4.8329 8.031-2.6581 2.6182-5.5746 4.7603-6.4811 4.7603-2.4073 0-7.9008-7.4334-8.5781-11.607-0.3208-1.9767-0.9765-3.8371-1.4572-4.1342-1.2451-0.7695-3.3537 0.6835-2.1377 1.4731 0.5348 0.3472 1.2812 2.3114 1.6586 4.3649 0.5694 3.0977 0.3475 3.9148-1.3031 4.7982-4.7353 2.5343-6.7157 1.4378-9.4803-5.2488-3.445-8.3322-4.0991-14.772-2.4431-24.055 1.5035-8.4284 5.1039-14.771 12.132-21.372l4.0013-3.7583-3.5596-5.9756c-3.3153-5.5654-3.5677-6.5902-3.6769-14.93-0.0645-4.9247 0.6104-16.227 1.4998-25.116 1.5218-15.209 1.889-16.8 6.2256-26.977l4.6084-10.815 7.4137-2.7039 7.4137-2.7039 6.3168 1.7617c7.8492 2.189 8.6717 2.6262 17.649 9.3797 8.9099 6.703 17.535 17.923 24.833 32.306 4.8511 9.5603 6.7668 12.16 6.7668 9.1812 0-2.4443-11.646-22.867-17.211-30.183-7.9018-10.387-18.728-18.448-29.805-22.192l-8.4378-2.8521-8.2612 3.2263-8.2612 3.2264-4.5416 10.076c-4.2712 9.4767-4.653 11.069-6.4131 26.744-1.0294 9.1671-1.8828 18.774-1.8965 21.348l-0.0249 4.6808-6.3135-2.5993c-3.8448-1.5829-8.9796-2.7666-13.132-3.027-3.7502-0.2352-6.8185-0.5227-6.8185-0.6389s0.6681-2.224 1.4846-4.6842c1.968-5.9295 5.1952-25.79 6.6275-40.786 1.0042-10.514 0.929-13.136-0.5829-20.34l-1.7357-8.2709-3.8695-0.519c-2.1283-0.2855-7.5415 0.2995-12.029 1.2999-6.3547 1.4165-9.916 2.9718-16.098 7.0305-4.366 2.8664-8.7448 6.1028-9.7306 7.1922-1.7724 1.9585-1.8243 1.9501-4.6369-0.7445-3.5488-3.3999-5.1104-2.2968-1.7752 1.254l2.4452 2.6032-4.5457 3.9286c-2.5001 2.1607-4.8866 3.9422-5.3033 3.9588s-0.7576 0.4847-0.7576 1.0403c0 2.2969 2.99 0.6013 11.234-6.3706 13.692-11.579 21.052-15.95 30.195-17.934 11.701-2.5393 12.605-2.1593 14.643 6.1571 1.8966 7.7391 1.6578 13.172-1.6188 36.836-1.9168 13.844-8.1643 37.193-12.028 44.952-3.1681 6.3629-3.3376 7.8473-0.9819 8.595 1.1727 0.3722 2.9885 2.0848 4.035 3.8057 1.901 3.1259 1.9002 3.1336-0.794 7.9264-2.4905 4.4304-3.0652 4.8481-7.5119 5.4597-3.8953 0.5357-5.4682 0.2586-8.2338-1.4506-1.8803-1.1621-3.7059-2.1128-4.057-2.1128s-0.6655 3.0683-0.6986 6.8185c-0.0807 9.1387-1.2433 15.676-3.3633 18.911l-1.75 2.6709-1.8632-2.3686c-1.0247-1.3027-2.955-5.959-4.2894-10.347-3.2056-10.541-5.3419-11.466-4.5807-1.9832 0.3045 3.794 0.1328 8.0053-0.3817 9.3585-0.922 2.4251-0.966 2.4331-3.0695 0.5593-3.3103-2.9489-4.8857-7.7941-4.8857-15.026 0-5.5604 0.5681-7.7517 3.539-13.651 4.1252-8.1916 4.7695-8.4988 17.927-8.547l8.8388-0.0324 0.0641-9.5965c0.0353-5.278 0.8689-20.733 1.8524-34.345s1.6119-24.963 1.3962-25.225c-0.98-1.1892-2.2731 2.942-2.2871 7.3071l-0.0155 4.811-5.4472 2.409c-2.996 1.325-9.5872 2.9748-14.647 3.6663-10.197 1.3935-13.035 3.634-3.1497 2.4868l6.0503-0.7022-1.5182 3.6335c-1.973 4.7219-0.0913 4.749 2.3279 0.0335 1.5651-3.0506 2.9091-3.9711 8.8075-6.0322 3.8283-1.3377 7.0048-2.3315 7.0587-2.2084s-0.3288 7.3528-0.8505 16.066l-0.9486 15.842-6.1651 2.2673c-3.3908 1.247-13.438 5.7669-22.328 10.044s-21.827 10.429-28.75 13.671l-12.588 5.8938-15.418 0.4143c-14.27 0.3834-16.267 0.2039-26.808-2.4089-7.8409-1.9434-15.356-4.7526-24.118-9.015l-12.728-6.1919 12.728-5.6985 12.728-5.6986 24.713-1.6598 24.713-1.6598 8.6219-7.8702 8.6219-7.8702 3.3049 2.5496c5.8651 4.5245 4.882 1.3336-1.3264-4.3053-6.3289-5.7484-11.105-7.8382-6.1911-2.7088l2.7315 2.851-8.4528 7.6947-8.4528 7.6947-24.647 1.6423-24.647 1.6423-13.32 6.0437c-11.725 5.3202-13.569 5.8879-15.405 4.7415-3.9705-2.4796-2.8051-7.8386 4.8789-22.436 4.8002-9.1192 8.5802-18.237 12.165-29.344 2.8607-8.8625 6.0878-17.548 7.1712-19.301 2.3685-3.8323 10.121-8.1309 23.209-12.869 5.2713-1.9083 15.039-6.1977 21.706-9.5319 7.2487-3.6252 15.32-6.8114 20.078-7.9257 7.8019-1.8273 7.992-1.9458 9.7703-6.0944 0.9975-2.327 3.6856-7.195 5.9736-10.818 3.8487-6.094 4.6059-6.7374 10.121-8.5998l5.9607-2.013 1.5981 2.439c0.879 1.3415 1.9296 2.439 2.3347 2.439s2.9806-3.685 5.7233-8.1888l4.9867-8.1888 2.7893 3.3906 2.7893 3.3906 7.9018-7.829 7.9018-7.829 1.7838 3.2833c0.9811 1.8058 2.617 4.3765 3.6353 5.7126l1.8514 2.4293 8.6091-6.7225c4.735-3.6974 8.8331-6.7225 9.1068-6.7225s0.8045 2.0456 1.1794 4.5457 0.8924 4.5457 1.1501 4.5457 3.7026-1.6287 7.6554-3.6193c7.402-3.7276 8.8695-3.6026 8.9095 0.7588 0.0411 4.4804 0.8785 4.8808 10.206 4.8808 8.958 0 8.9645 2e-3 9.5727 2.7779 1.153 5.2622 1.2061 5.3033 6.848 5.3033 7.9941 0 12.004 0.9764 11.321 2.7566-2.2252 5.7988-2.1441 5.908 5.3889 7.2542l7.0871 1.2665 0.3025 5.1939 0.3025 5.1939 7.5761 1.2538c12.587 2.083 11.944 1.7093 11.39 6.6236l-0.486 4.3119 7.1605 3.464 7.1605 3.464-2.4341 4.1534-2.4341 4.1534 7.4784 2.8552 7.4784 2.8552-2.1427 3.0091c-2.4415 3.4288-3.176 2.5983 7.9926 9.0388 4.028 2.3228 7.3236 4.7536 7.3236 5.4018s-0.9091 2.0013-2.0203 3.0069-2.0188 2.3261-2.017 2.9345 3.819 3.2903 8.4827 5.9599l8.4794 4.8537-0.4819 3.7325c-0.4359 3.3757-0.0397 4.163 4.1442 8.236 3.7207 3.6221 4.6261 5.1818 4.6261 7.9692 0 2.766 1.1368 4.7606 5.6304 9.8789l5.6304 6.4132-2.8525 1.227c-1.5689 0.6749-2.9808 1.3012-3.1376 1.3918s4.221 9.8854 9.7284 21.766c13.74 29.64 17.038 41.221 17.948 63.018l0.6751 16.162-6.8768 16.162c-3.7822 8.8894-7.3321 16.755-7.8886 17.479s-6.7394 5.3381-13.74 10.253c-11.407 8.0089-13.722 9.2086-22.307 11.562-5.2687 1.4442-10.488 2.5912-11.6 2.5491s-8.3882-3.0538-16.171-6.6925zm8.5952-182.03c0-0.877-10.106-2.1233-11.082-1.3666-0.2617 0.2029 0.1929 0.7917 1.0102 1.3086 1.9128 1.2097 10.072 1.2567 10.072 0.058v5e-5z"
        fill={props.color} /*?*/
      />
      <path
        d="m199.1038,564.0099-3.0331-.6061-.4256-3.9271c-.5807-5.3584-.5812-5.4482-.0261-4.7611 .2455.3039 1.8218,1.2905 3.5028,2.1924 2.3758,1.2747 3.5601,2.2066 5.3182,4.1848 2.0069,2.2581 2.322,2.4848 2.7956,2.0111s.2617-.8343-1.8807-3.1997c-2.0085-2.2176-2.9942-2.9651-5.8619-4.4454l-3.4474-1.7796 1.5323-1.784c1.6092-1.8735 1.8725-2.4597 10.8393-24.1297 2.3405-5.6562 4.2554-10.4375 4.2554-10.625s-.2813-.3396-.625-.338c-.4784.002-1.4558,2.0075-4.1659,8.5465l-3.541,8.5435-2.5305.1966c-3.5817.2783-20.377.8823-32.1857,1.1575l-10.0124.2333-3.1522-11.2162-3.1522-11.2162 5.6145-9.6418c3.088-5.303 5.7977-9.8299 6.0217-10.0597 .3107-.3188 3.3282-.1771 12.7287.5979 13.8778,1.1441 10.5887,1.2885 29.4203-1.2915l9.2417-1.2662 14.3297-4.8326c7.8813-2.658 15.1109-5.2285 16.0658-5.7123 1.5695-.7953 1.8952-.8415 3.3951-.4817 .9125.2189 6.158.523 11.6568.6758 9.0773.2522 10.6883.2041 17.4978-.5226l7.5-.8004 7.5-3.64c4.125-2.002 12.9809-6.093 19.6797-9.091s15.5381-7.2504 19.6428-9.4497c6.0559-3.2447 8.709-4.4315 14.0703-6.2939 3.6339-1.2624 6.6473-2.2952 6.6964-2.2953s.0893,4.12.0893,9.1556v9.1557l-1.6964-.2417c-4.628-.6594-7.4838-.5782-14.1548.4029l-6.7441.9918-3.8737,7.1429-3.8737,7.1429 .2239,9.4643 .2239,9.4643 4.0844,4.9107c2.2464,2.7009 4.2,4.9107 4.3413,4.9107s.851-1.6723 1.5773-3.7163c1.232-3.4675 1.3215-3.9995 1.3374-7.9464l.017-4.2301 1.8951,5.9365c2.0551,6.4378 2.0132,6.3548 4.7732,9.4389l1.8808,2.1017 2.2263-2.4492c1.2245-1.3471 2.419-2.7883 2.6546-3.2029 .7258-1.277 2.2538-13.6018 2.2519-18.1643-.001-2.308.0861-4.1964.1935-4.1964s1.4944.7494 3.0823,1.6653l2.8871,1.6652 3.257-.427c1.7914-.2349 4.2488-.5967 5.4609-.8042l2.2039-.3771 3.064-5.1186c1.6852-2.8152 3.0614-5.3322 3.0583-5.5933s-.8112-1.9575-1.7958-3.7698c-1.6459-3.0295-1.9575-3.3879-3.865-4.4446l-2.0748-1.1494 1.873-3.9483c1.0302-2.1716 2.9667-7.3635 4.3033-11.5376 2.3382-7.3018 2.4646-7.5877 3.3369-7.5479 .6053.0277.6989.0957.2816.2048-.3438.0898-.625.473-.625.8514 0,.6461.3005.6881 4.9188.6881h4.9188l6.3464,2.3024c4.6513,1.6875 6.9119,2.7129 8.4637,3.8393l2.1173,1.5369 .0104,3.9286 .0104,3.9286 3.2142,5.5357c1.7678,3.0446 3.2143,5.6411 3.2143,5.7698s-1.0045.827-2.2321,1.5517c-2.0724,1.2234-2.576,1.8071-7.0385,8.1588l-4.8064,6.8411-1.3857,8.75c-.7621,4.8125-1.4423,8.8074-1.5115,8.8775-.1094.1108-21.6247,2.8962-22.4389,2.9049-.604.007.1639,1.1394 4.5947,6.7787l4.4972,5.7239-.4956,5.2828-.4956,5.2828-2.561,3.4675c-1.4085,1.9071-2.6802,3.4574-2.8259,3.4451s-1.4201-.4543-2.832-.9821c-2.5535-.9547-2.596-.9926-8.0808-7.2097l-5.5137-6.25-9.2918-3.9899c-8.4547-3.6304-10.2123-4.2417-19.5085-6.7857l-10.2167-2.7958v-4.3649c0-4.0391-.8184-9.7424-1.398-9.7424-.119,0-3.1864,2.9732-6.8163,6.6071s-6.7221,6.6071-6.8714,6.6071-.2715-2.2258-.2715-4.9461-.1022-6.1355-.227-7.5893l-.227-2.6432-3.0069-1.8902-3.0069-1.8902-1.1411.9585c-.6276.5272-2.7066,2.4462-4.6199,4.2645l-3.4788,3.3059-2.5501,8.7251-2.5501,8.7251-7.3639,1.1596c-4.0502.6378-13.0875,2.2324-20.0831,3.5436l-12.7192,2.3839-5.138,5.9044c-3.6962,4.2475-6.7646,8.312-10.9345,14.4842-5.71,8.4516-5.882,8.6613-11.5227,14.0404l-5.7262,5.4607-2.763.1241c-1.6703.075-3.9625-.1156-5.7961-.482z"
        fill="#808000" /*branch*/
      />
      <path
        d="m290.4617,528.1205c-4.3773-3.0568-4.5795-3.2855-6.1603-6.9697l-1.6344-3.8092 2.2283-7.555c1.2256-4.1553 2.4396-8.0246 2.6978-8.5984s2.1757-2.5705 4.2612-4.4369l3.7917-3.3935 2.272,1.3723 2.272,1.3723 .3644,8.7467c.2004,4.8107.5104,8.7467.6888,8.7467s3.3896-3.0725 7.1359-6.8278c7.8852-7.904 7.4384-7.9771 7.5188,1.2295l.0503,5.766-2.2343,3.5779c-3.1005,4.965-11.7485,13.4249-13.7311,13.4325-.8028.003-2.2552.1184-3.2275.2563-1.542.2188-2.3457-.1528-6.2937-2.9097z"
        fill={props.color}
      />
      <path
        d="m441.807,531.5945c-3.5834-.9567-3.7583-1.0777-5.8733-4.0628-2.907-4.103-4.0401-8.018-3.2621-11.2716 .9314-3.8954 8.6578-17.1277 11.2637-19.2904 1.4303-1.187 3.1342.9184 3.4836,4.3047 .2582,2.5021.0614,3.3116-1.9521,8.0252-1.2316,2.8833-2.2393,5.3461-2.2393,5.4729s.3135.3509.6966.4979c.5007.1921 1.6541-1.983 4.1004-7.7325l3.4038-7.9998 3.0092-1.3505c1.6551-.7428 3.0519-1.2731 3.1039-1.1786 2.0669,3.7513 2.9179,6.6325 3.682,12.4668 .7376,5.6315.7668,7.1448.2125,11.0114l-.6425,4.4827-3.8585,2.5617c-2.1222,1.4089-5.5631,3.1214-7.6466,3.8054l-3.7881,1.2437-3.6934-.9861z"
        fill={props.color}
      />
      <path
        d="m291.6992,528.5202c-1.8027-1.2365-3.7767-2.657-4.3866-3.1567-1.1583-.9489-4.1966-6.9192-4.1893-8.2321 .005-.9306 4.3384-14.8486 4.9977-16.0522 .4407-.8045 2.9611-3.2889 6.1982-6.1097l1.3518-1.178 2.0073,1.1281c2.3179,1.3028 2.6108,2.1991 2.6163,8.0065 .004,4.8268.5409,10.6697.9794,10.6697 .1825,0 3.1978-2.7274 6.7007-6.0609s6.5967-6.0609 6.8752-6.0609c.298,0 .5925,2.4432.7155,5.9347l.2091,5.9347-2.6908,4.0971c-2.8226,4.2978-10.3636,11.9955-12.575,12.8362-2.8977,1.1017-5.3577.6113-8.8094-1.7564z"
        fill="#808000"
      />
      <path
        d="m463.4681,516.2921c-.0207-1.1561-.4024-4.7555-.8483-7.9987-.6169-4.4869-1.2243-6.7919-2.5407-9.6411-.9515-2.0594-1.8241-3.7443-1.9392-3.7443s-1.9081.7742-3.9844,1.7204c-2.6333,1.2-4.0105,2.1548-4.5534,3.1567l-.7784,1.4364-.0202-1.6611c-.0148-1.2184-.5484-2.2273-2.0022-3.7858l-1.982-2.1248-1.3603,1.2605c-1.9639,1.8198-7.0706,9.5454-9.8769,14.9422-2.3516,4.5222-2.4404,4.6206-3.3069,3.6631-.8556-.9454-.8068-1.2375 1.2442-7.4519l2.1347-6.4679-1.063-8.7341-1.063-8.7341-2.6879-3.5526-2.6879-3.5526 1.5486-2.8103c1.8503-3.3578 2.3947-4.0426 2.3947-3.0124 0,.4167-.2414.999-.5364,1.294-.7253.7253 9.967,7.568 15.6887,10.0402l4.2931,1.8549 5.5316-.3004c3.9811-.2162 6.2692-.6061 8.163-1.3911 3.0808-1.2769 1.9033-1.8792 10.9964,5.6244 3.198,2.639 5.7389,5.0323 5.6464,5.3183s-3.2944,4.9375-7.1152,10.3366c-4.9793,7.0361-7.2741,10.7513-8.1022,13.1169l-1.1552,3.3005-.0376-2.102z"
        fill="#808000" /*branch*/
      />
      <path
        d="m295.7691,530.1643c-1.9512-.546-6.3326-3.317-8.2043-5.1887-.6748-.6748-1.8618-2.5234-2.6377-4.108-1.692-3.4554-1.6511-3.8694 1.307-13.2332l2.134-6.7551 3.4976-3.2382c1.9237-1.781 3.7982-3.2382 4.1655-3.2382s1.2905.5355 2.0513,1.1899c1.1558.9942 1.447,1.7628 1.77,4.672 .2126,1.9151.3983,4.9878.4125,6.8281 .0292,3.7659.4675,6.5029 1.0414,6.5029 .2113,0 3.308-2.6469 6.8817-5.8821l6.4975-5.8821 .3414,2.2203c.1878,1.2212.3582,3.8325.3788,5.8029 .0367,3.5152-.0109,3.6515-2.5343,7.2446-1.4145,2.0141-4.1692,5.3437-6.1216,7.3992-5.1264,5.3968-7.523,6.6333-10.9807,5.6657z"
        fill={props.color}
      />
      <path
        id="eyeball"
        className="eye"
        transform="matrix(1 0 0 1.375 0 -149.74)"
        d="m270.72 407.38a13.384 8.0812 0 1 1 -26.769 0 13.384 8.0812 0 1 1 26.769 0z"
        fill="#fff" /*eye*/
      />
      <path
        id="iris"
        className="eye"
        transform="matrix(.56604 0 0 .78125 111.17 91.892)"
        d="m270.72 407.38a13.384 8.0812 0 1 1 -26.769 0 13.384 8.0812 0 1 1 26.769 0z"
      />
    </svg>
  );
};

class Container extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      color: 'green',
      colorArray: [],
      shuffledColorArray: [],
      clickedBlocks: [],
      block1Clicked: false,
      score: 0
    };

    this.changeColor = this.changeColor.bind(this);
    this.clickControl = this.clickControl.bind(this);
    this.shuffleColors = this.shuffleColors.bind(this);
    this.scoreControl = this.scoreControl.bind(this);
  }

  colorRGB = () => {
    let r = Math.floor(Math.random() * 255);
    let g = Math.floor(Math.random() * 255);
    let b = Math.floor(Math.random() * 255);

    let rgbArray = [r, g, b];
    return rgbArray;
  };

  shuffleColors(a) {
    for (let i = a.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }

    return a;
  }

  changeColor() {
    let currentRGB = this.colorRGB();
    let shuffledArray = [...currentRGB];
    let shuffledArray2 = this.shuffleColors(shuffledArray);

    this.setState({
      color: 'rgb(' + currentRGB[0] + ',' + currentRGB[1] + ',' + currentRGB[2] + ')',
      colorArray: currentRGB,
      shuffledColorArray: shuffledArray2,
      clickedBlocks: [],
      block1Clicked: false,
      block2Clicked: false,
      block3Clicked: false
    });

    if (JSON.stringify(this.state.colorArray) == JSON.stringify(this.state.clickedBlocks) && this.state.clickedBlocks.length) {
      this.setState(state => ({
        score: state.score + 1
      }));

      console.log('ding');
    }
  }

  clickControl(name, block) {
    if (this.state.clickedBlocks.length < 3) {
      if (block === 1) {
        this.setState({
          block1Clicked: true
        });
      } else if (block === 2) {
        this.setState({
          block2Clicked: true
        });
      } else if (block === 3) {
        this.setState({
          block3Clicked: true
        });
      }

      this.setState({
        clickedBlocks: this.state.clickedBlocks.concat(name)
      });
    }
  }

  scoreControl() {
    this.setState(state => ({
      score: state.count + 1
    }));
  }

  render() {
    const arraysEqual = (a1, a2) => {
      return JSON.stringify(a1) == JSON.stringify(a2);
    };

    return (
      <div>
        <div className="blocksDiv">
          <ColorFrame1
            onClick={() => this.clickControl(this.state.shuffledColorArray[0], 1)}
            color={this.state.shuffledColorArray[0]}
            clicked={this.state.block1Clicked}
          />
          <ColorFrame2
            onClick={() => this.clickControl(this.state.shuffledColorArray[1], 2)}
            color={this.state.shuffledColorArray[1]}
            clicked={this.state.block2Clicked}
          />
          <ColorFrame3
            onClick={() => this.clickControl(this.state.shuffledColorArray[2], 3)}
            color={this.state.shuffledColorArray[2]}
            clicked={this.state.block3Clicked}
          />
        </div>

        <div className="field" style={{ backgroundColor: this.state.color }}>
          {this.state.color}

          <Chameleon color={'rgb(' + this.state.clickedBlocks[0] + ',' + this.state.clickedBlocks[1] + ',' + this.state.clickedBlocks[2] + ')'} />
        </div>

        {arraysEqual(this.state.colorArray, this.state.clickedBlocks) && this.state.clickedBlocks.length > 0 ? (
          <Message mess={'Well Done'} />
        ) : this.state.clickedBlocks.length >= 3 ? (
          <Message mess={'Wrong color'} />
        ) : (
          <Message mess={'Save me'} />
        )}

        {this.state.clickedBlocks.length < 3 ? (
          <ActionButton onClick={this.changeColor} text={'Start'} />
        ) : arraysEqual(this.state.colorArray, this.state.clickedBlocks) ? (
          <ActionButton onClick={this.changeColor} text={'Next Round'} />
        ) : (
          <ActionButton onClick={this.changeColor} text={'Try Again'} />
        )}

        <p>Score: {this.state.score}</p>

        <div className="colorBar">
          <p className="colorBarBlocks">{this.state.clickedBlocks[0]}</p>
          <p className="colorBarBlocks">{this.state.clickedBlocks[1]}</p>
          <p className="colorBarBlocks">{this.state.clickedBlocks[2]}</p>
        </div>
      </div>
    );
  }
}

const domContainer = document.querySelector('#root');
ReactDOM.render(<Container />, domContainer);
